<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js canvas - geometry - terrain</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				color: #71544e;
				font-family:Monospace;
				font-size:13px;
				text-align:center;

				background-color: #bfd1e5;
				margin: 0px;
				overflow: hidden;
			}

			#info {
				position: absolute;
				top: 0px; width: 100%;
				padding: 5px;
			}

			a {

				color: #b07861;
			}

		</style>
	</head>
	<body>

		<div id="container"><br /><br /><br /><br /><br />Generating...</div>

		<script src="three.min.js"></script>

		<script src="renderers/Projector.js"></script>
		<script src="renderers/CanvasRenderer.js"></script>
		<script src="controls/FirstPersonControls.js"></script>
		<script src="controls/PointerLockControls.js"></script>
		<script src="controls/DeviceOrientationControls.js"></script>
  		<script src="controls/OrbitControls.js"></script>
		<script src="effects/StereoEffect.js"></script>


		<script src="libs/stats.min.js"></script>

		<script src="ImprovedNoise.js"></script>

		<script>

			var container, element, stats;

			var camera, controls, scene, renderer, effect;

			var particles, snowGeometry, snowMaterials = [], snowParameters, snowI, snowH, snowColor, snowSprite, snowSize;

			var mesh, texture;

			var worldWidth = 256, worldDepth = 256,
			worldHalfWidth = worldWidth / 2, worldHalfDepth = worldDepth / 2;

			var clock = new THREE.Clock();

			init();
			animate();

			function init() {

				container = document.getElementById( 'container' );
				renderer = new THREE.WebGLRenderer();
				renderer.setClearColor( 0xbfd1e5 );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );

				element = renderer.domElement;

				camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 20000 );

				scene = new THREE.Scene();

				// controls = new THREE.FirstPersonControls( camera );
				// controls.movementSpeed = 1000;
				// controls.lookSpeed = 0.1;
				// controls.mouseDragOn = true;

				controls = new THREE.OrbitControls(camera, element);
				// controls.rotateUp(Math.PI / 4);
				controls.target.set(
					camera.position.x + 0.1,
					camera.position.y,
					camera.position.z
					);
				// controls.noZoom = true;
				// controls.noPan = true;

				function setOrientationControls(e) {
					if (!e.alpha) {
						return;
					}

					controls = new THREE.DeviceOrientationControls(camera, true);
					controls.connect();
					controls.update();

					element.addEventListener('click', fullscreen, false);

					window.removeEventListener('deviceorientation', setOrientationControls, true);
				}
				window.addEventListener('deviceorientation', setOrientationControls, true);

				data = generateHeight( worldWidth, worldDepth );

				//find the optimum position - problem is how will this change in the phone?
				camera.position.x = 100;
				camera.position.y = 1000;
				camera.position.z = 3000;
				// camera.position.y = data[ worldHalfWidth + worldHalfDepth * worldWidth ] * 10 + 500;

				var geometry = new THREE.PlaneBufferGeometry( 7500, 7500, worldWidth - 1, worldDepth - 1 );
				geometry.rotateX( - Math.PI / 2 );

				var vertices = geometry.attributes.position.array;

				for ( var i = 0, j = 0, l = vertices.length; i < l; i ++, j += 3 ) {

					vertices[ j + 1 ] = data[ i ] * 10;

				}

				texture = new THREE.CanvasTexture( generateTexture( data, worldWidth, worldDepth ) );
				texture.wrapS = THREE.ClampToEdgeWrapping;
				texture.wrapT = THREE.ClampToEdgeWrapping;

				mesh = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( { map: texture } ) );
				scene.add( mesh );

				//adding snow flakes
				snowGeometry = new THREE.Geometry();

				sprite1 = THREE.ImageUtils.loadTexture( "textures/sprites/snowflake1.png" );
				sprite2 = THREE.ImageUtils.loadTexture( "textures/sprites/snowflake2.png" );
				sprite3 = THREE.ImageUtils.loadTexture( "textures/sprites/snowflake3.png" );
				sprite4 = THREE.ImageUtils.loadTexture( "textures/sprites/snowflake4.png" );
				sprite5 = THREE.ImageUtils.loadTexture( "textures/sprites/snowflake5.png" );

				for ( i = 0; i < 10000; i ++ ) {

					var vertex = new THREE.Vector3();
					vertex.x = Math.random() * 2000 - 1000;
					vertex.y = Math.random() * 2000 - 1000;
					vertex.z = Math.random() * 2000 - 1000;

					snowGeometry.vertices.push( vertex );

				}

				snowParameters = [
					[ [1.0, 0.2, 0.5], sprite2, 20 ],
					[ [0.95, 0.1, 0.5], sprite3, 15 ],
					[ [0.90, 0.05, 0.5], sprite1, 10 ],
					[ [0.85, 0, 0.5], sprite5, 8 ],
					[ [0.80, 0, 0.5], sprite4, 5 ]
				];

				for ( i = 0; i < snowParameters.length; i ++ ) {

					snowColor  = snowParameters[i][0];
					snowSprite = snowParameters[i][1];
					snowSize   = snowParameters[i][2];

					snowMaterials[i] = new THREE.PointsMaterial( { size: snowSize, map: snowSprite, blending: THREE.AdditiveBlending, depthTest: false, transparent : true } );
					snowMaterials[i].color.setHSL( snowColor[0], snowColor[1], snowColor[2] );

					particles = new THREE.Points( snowGeometry, snowMaterials[i] );

					particles.rotation.x = Math.random() * 6;
					particles.rotation.y = Math.random() * 6;
					particles.rotation.z = Math.random() * 6;

					scene.add( particles );

				}

				// renderer = new THREE.WebGLRenderer();
				// renderer.setClearColor( 0xbfd1e5 );
				// renderer.setPixelRatio( window.devicePixelRatio );
				// renderer.setSize( window.innerWidth, window.innerHeight );

				container.innerHTML = "";

				container.appendChild( element );

				effect = new THREE.StereoEffect( renderer );
				effect.eyeSeparation = 10;
				effect.setSize( window.innerWidth, window.innerHeight );

				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				container.appendChild( stats.domElement );

				//

				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				effect.setSize( window.innerWidth, window.innerHeight );

				controls.handleResize();

			}

			function generateHeight( width, height ) {

				var size = width * height, data = new Uint8Array( size ),
				perlin = new ImprovedNoise(), quality = 1, z = Math.random() * 100;

				for ( var j = 0; j < 4; j ++ ) {

					for ( var i = 0; i < size; i ++ ) {

						var x = i % width, y = ~~ ( i / width );
						data[ i ] += Math.abs( perlin.noise( x / quality, y / quality, z ) * quality * 1.75 );

					}

					quality *= 5;

				}

				return data;

			}

			function generateTexture( data, width, height ) {

				var canvas, canvasScaled, context, image, imageData,
				level, diff, vector3, sun, shade;

				vector3 = new THREE.Vector3( 0, 0, 0 );

				sun = new THREE.Vector3( 1, 1, 1 );
				sun.normalize();

				canvas = document.createElement( 'canvas' );
				canvas.width = width;
				canvas.height = height;

				context = canvas.getContext( '2d' );
				context.fillStyle = '#000';
				context.fillRect( 0, 0, width, height );

				image = context.getImageData( 0, 0, canvas.width, canvas.height );
				imageData = image.data;

				for ( var i = 0, j = 0, l = imageData.length; i < l; i += 4, j ++ ) {

					vector3.x = data[ j - 2 ] - data[ j + 2 ];
					vector3.y = 2;
					vector3.z = data[ j - width * 2 ] - data[ j + width * 2 ];
					vector3.normalize();

					shade = vector3.dot( sun );

					imageData[ i ] = ( 96 + shade * 128 ) * ( 0.5 + data[ j ] * 0.007 );
					imageData[ i + 1 ] = ( 32 + shade * 96 ) * ( 0.5 + data[ j ] * 0.007 );
					imageData[ i + 2 ] = ( shade * 96 ) * ( 0.5 + data[ j ] * 0.007 );
				}

				context.putImageData( image, 0, 0 );

				// Scaled 4x

				canvasScaled = document.createElement( 'canvas' );
				canvasScaled.width = width * 4;
				canvasScaled.height = height * 4;

				context = canvasScaled.getContext( '2d' );
				context.scale( 4, 4 );
				context.drawImage( canvas, 0, 0 );

				image = context.getImageData( 0, 0, canvasScaled.width, canvasScaled.height );
				imageData = image.data;

				for ( var i = 0, l = imageData.length; i < l; i += 4 ) {

					var v = ~~ ( Math.random() * 5 );

					imageData[ i ] += v;
					imageData[ i + 1 ] += v;
					imageData[ i + 2 ] += v;

				}

				context.putImageData( image, 0, 0 );

				return canvasScaled;

			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();
				stats.update();

			}

			function render() {

				controls.update( clock.getDelta() );
				effect.render( scene, camera );

			}
			
			function fullscreen() {
		      if (container.requestFullscreen) {
		        container.requestFullscreen();
		      } else if (container.msRequestFullscreen) {
		        container.msRequestFullscreen();
		      } else if (container.mozRequestFullScreen) {
		        container.mozRequestFullScreen();
		      } else if (container.webkitRequestFullscreen) {
		        container.webkitRequestFullscreen();
		      }
		    }
		</script>

	</body>
</html>



